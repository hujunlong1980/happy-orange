<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<!-- 指定一个需要在配置中解析使用的外部属性文件 -->
	<properties resource="mybatis/generator.jdbc.properties" />
	<!-- 添加运行类路径位置 -->
	<classPathEntry location="${class.PathEntry}" />
	<!-- <classPathEntry location="D:/mvn_jar/mysql/mysql-connector-java/5.1.34/mysql-connector-java-5.1.34-sources.jar" /> -->
	<!-- 用于指定生成一组对象的环境 -->
	<context id="MysqlTables" targetRuntime="MyBatis3">
		<!-- 定义注释生成器的属性 -->
		<commentGenerator>
			<!-- 生成的代码中是否包含任何注释:true时，不会往生成的元素中添加任何注释 -->
			<property name="suppressAllComments" value="true"/>
		</commentGenerator>
		<!-- 指定数据库连接所需的内省表的属性 -->
		<jdbcConnection driverClass="${jdbc.driverClass}"
			connectionURL="${jdbc.url}"
			userId="${jdbc.user}"
			password="${jdbc.password}">
		</jdbcConnection>
		<!-- java类型的解析器，用于从数据库列信息计算java类型 -->
		<javaTypeResolver>
			<!-- 如果数据库列是decimal或numeric类型,将使用java.math.bigdecimal -->
			<property name="forceBigDecimals" value="true" />
		</javaTypeResolver>
		<!-- Java模型生成器生成主键类，纪录类和查询类 -->
		<javaModelGenerator targetPackage="com.happy.orange.mybatis.entity.vo" targetProject="src\main\java">
			<property name="enableSubPackages" value="true"/>
			<property name="trimStrings" value="true"/>
		</javaModelGenerator>
		<!-- 定义SQL映射生成器的属性 -->
		<sqlMapGenerator targetPackage="com.happy.orange.mybatis.entity.dao" targetProject="src\main\java">
			<!-- 基于目录和表来生成不同的Java包 -->
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>
		<!-- Java客户端生成器生成Java接口和类，它可以简单地使用生成的Java模型和XML映射文件 -->
		<javaClientGenerator targetPackage="com.happy.orange.mybatis.entity.mapper"
			targetProject="src\main\java" type="XMLMAPPER">
			<!-- 基于目录和表来生成不同的Java包 -->
			<property name="enableSubPackages" value="true" />
		</javaClientGenerator>
		<!-- domainObjectName:生成对象的基本名称 ;
			 enableInsert:是否生成Insert语句(默认值是 true);
			 enableSelectByPrimaryKey:是否生成通过主键查询的语句(默认值是 true);
			 enableUpdateByPrimaryKey:是否生成通过主键更新的语句(默认值是 true);
			 enableDeleteByPrimaryKey:是否生成通过主键删除的语句(默认值是 true);
			 enableSelectByExample:是否生成通过Example查询的语句。 这个语句支持运行时生成多种不同条件的动态查询(默认值是 true);
			 enableUpdateByExample:是否生成通过Example更新的语句,更新那些参数中值不为null的的列(默认值是 true);
			 enableDeleteByExample:是否生成通过Example删除的语句。 这个语句支持运行时生成多种不同的条件动态删除(默认值是 true);
			 enableCountByExample:是否生成通过Example查询总数的语句(默认值是 true);
			 selectByPrimaryKeyQueryId:以"'<value>' as QUERYID"这种形式被添加到通过主键查询的语句的select列中
			 selectByExampleQueryId:以"'<value>' as QUERYID"这种形式被添加到通过Example查询的语句的select列中
		-->
		<table tableName="user" domainObjectName="User"
			enableSelectByExample="false" enableCountByExample="false"
			enableUpdateByExample="false" enableDeleteByExample="false"
			selectByExampleQueryId="false" >
		</table>
	</context>
</generatorConfiguration>